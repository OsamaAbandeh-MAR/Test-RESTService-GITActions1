name: Build, Test, and Verify CustomerSearch Service

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests targeting the main branch

jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment for the job

    steps:
      - name: Checkout code  # Step to checkout the code from the repository
        uses: actions/checkout@v2

      - name: Setup .NET  # Set up .NET SDK for building and testing the project
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'  # Specify the .NET version to use, adjust as needed

      - name: Restore dependencies  # Restore project dependencies using dotnet restore
        run: dotnet restore CustomerSearch/CustomerSearch.csproj  # Specify path to .csproj file

      - name: Build CustomerSearch service  # Build the project in Release configuration
        run: dotnet build CustomerSearch/CustomerSearch.csproj --configuration Release  # Specify path to .csproj file

      - name: Run tests  # Run unit tests to ensure the application works as expected
        run: dotnet test CustomerSearch.Tests/CustomerSearch.Tests.csproj --no-build --verbosity normal  # Specify path to test project .csproj file

      - name: Publish CustomerSearch service  # Publish the project to prepare it for running
        run: dotnet publish CustomerSearch/CustomerSearch.csproj -c Release -o ./publish  # Specify path to .csproj file and output folder

      - name: Verify service is running  # Start the service and verify that it responds successfully
        run: |
          dotnet ./publish/CustomerSearch.dll &  # Start the service in the background
          sleep 10  # Wait 10 seconds to allow the service to start
          curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/customer/search | grep 200  # Check if service responds with HTTP 200 status
        shell: bash  # Use bash shell to run multiple commands
